# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from shared_files/position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class position(genpy.Message):
  _md5sum = "6f5868ec9e98907eb04314775bd5fcdc"
  _type = "shared_files/position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The values represent if we are to the left, right, or center in the arena
# 
# Found tells us if we have found our object, if not we need to rotate
# 	1 = found object, so read position and direction variables to know if we need to move
#	0 = not found object so rotate robot either clockwise or counter-clockwise
#
# Position tells us where we are => left, right or center of the arena
#	-1 = left
#	0 = center
#	1 = right
#
# Direction tells us which direction we need to move => left or right
#	-1 = left
#	0 = stop moving and go forward, we are too close to the dump_site and we don't want to hit
#	1 = right
#
# Rotation_enable tells us if we are centered and need to begin worrying about rotation
#	1 = centered, we need to orient ourselves
#	0 = not centered, don't worry about rotation
#
# Rotation_direction tells us the direction we need to rotate 
#	-1 = counter-clockwise
#	0 = parallel to collecto bin, don't need to rotate anymore
#	1 = clockwise
#
# angle represents the angle deviation from being in parallel to the collector bin

int8 found
int8 position
int8 direction
int8 rotation_enable
int8 rotation_direction
float32 angle
"""
  __slots__ = ['found','position','direction','rotation_enable','rotation_direction','angle']
  _slot_types = ['int8','int8','int8','int8','int8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       found,position,direction,rotation_enable,rotation_direction,angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.found is None:
        self.found = 0
      if self.position is None:
        self.position = 0
      if self.direction is None:
        self.direction = 0
      if self.rotation_enable is None:
        self.rotation_enable = 0
      if self.rotation_direction is None:
        self.rotation_direction = 0
      if self.angle is None:
        self.angle = 0.
    else:
      self.found = 0
      self.position = 0
      self.direction = 0
      self.rotation_enable = 0
      self.rotation_direction = 0
      self.angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5bf.pack(_x.found, _x.position, _x.direction, _x.rotation_enable, _x.rotation_direction, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.found, _x.position, _x.direction, _x.rotation_enable, _x.rotation_direction, _x.angle,) = _struct_5bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5bf.pack(_x.found, _x.position, _x.direction, _x.rotation_enable, _x.rotation_direction, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.found, _x.position, _x.direction, _x.rotation_enable, _x.rotation_direction, _x.angle,) = _struct_5bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5bf = struct.Struct("<5bf")
