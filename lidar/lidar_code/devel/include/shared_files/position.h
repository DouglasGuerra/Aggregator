// Generated by gencpp from file shared_files/position.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_POSITION_H
#define SHARED_FILES_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shared_files
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : found(0)
    , position(0)
    , direction(0)
    , rotation_enable(0)
    , rotation_direction(0)
    , angle(0.0)  {
    }
  position_(const ContainerAllocator& _alloc)
    : found(0)
    , position(0)
    , direction(0)
    , rotation_enable(0)
    , rotation_direction(0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _found_type;
  _found_type found;

   typedef int8_t _position_type;
  _position_type position;

   typedef int8_t _direction_type;
  _direction_type direction;

   typedef int8_t _rotation_enable_type;
  _rotation_enable_type rotation_enable;

   typedef int8_t _rotation_direction_type;
  _rotation_direction_type rotation_direction;

   typedef float _angle_type;
  _angle_type angle;




  typedef boost::shared_ptr< ::shared_files::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::shared_files::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::shared_files::position > positionPtr;
typedef boost::shared_ptr< ::shared_files::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'shared_files': ['/home/dguerra/aggregator/lidar/lidar_code/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f5868ec9e98907eb04314775bd5fcdc";
  }

  static const char* value(const ::shared_files::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f5868ec9e98907eULL;
  static const uint64_t static_value2 = 0xb04314775bd5fcdcULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/position";
  }

  static const char* value(const ::shared_files::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The values represent if we are to the left, right, or center in the arena\n\
# \n\
# Found tells us if we have found our object, if not we need to rotate\n\
# 	1 = found object, so read position and direction variables to know if we need to move\n\
#	0 = not found object so rotate robot either clockwise or counter-clockwise\n\
#\n\
# Position tells us where we are => left, right or center of the arena\n\
#	-1 = left\n\
#	0 = center\n\
#	1 = right\n\
#\n\
# Direction tells us which direction we need to move => left or right\n\
#	-1 = left\n\
#	0 = stop moving and go forward, we are too close to the dump_site and we don't want to hit\n\
#	1 = right\n\
#\n\
# Rotation_enable tells us if we are centered and need to begin worrying about rotation\n\
#	1 = centered, we need to orient ourselves\n\
#	0 = not centered, don't worry about rotation\n\
#\n\
# Rotation_direction tells us the direction we need to rotate \n\
#	-1 = counter-clockwise\n\
#	0 = parallel to collecto bin, don't need to rotate anymore\n\
#	1 = clockwise\n\
#\n\
# angle represents the angle deviation from being in parallel to the collector bin\n\
\n\
int8 found\n\
int8 position\n\
int8 direction\n\
int8 rotation_enable\n\
int8 rotation_direction\n\
float32 angle\n\
";
  }

  static const char* value(const ::shared_files::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.found);
      stream.next(m.position);
      stream.next(m.direction);
      stream.next(m.rotation_enable);
      stream.next(m.rotation_direction);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::position_<ContainerAllocator>& v)
  {
    s << indent << "found: ";
    Printer<int8_t>::stream(s, indent + "  ", v.found);
    s << indent << "position: ";
    Printer<int8_t>::stream(s, indent + "  ", v.position);
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
    s << indent << "rotation_enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rotation_enable);
    s << indent << "rotation_direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rotation_direction);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_POSITION_H
